#!/bin/bash
#
# android_gdb: Pushes gdbserver. Connects and enters debugging environment.

deviceID=""
if [[ $(echo "$1" | grep "^-d$") != "" ]];
then
  deviceID="$2"
fi

# hack for x86 support in adroid_setup.sh
if [ "$deviceID" == "x86" ] || [ "$deviceID" == "razr_i" ]
then
  ANDROID_ARCH=x86
fi

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# setup the gdbserver
$SCRIPT_DIR/android_gdbserver $@

# quit if gdbserver setup failed
if [[ "$?" != "0" ]]; then
  echo "ERROR: gdbserver failed to setup properly."
  exit 1
fi

# Wait for gdbserver
sleep 2

# variables that must match those in gdb_server
GDB_TMP_DIR=$(pwd)/android_gdb_tmp
APP_NAME=$(basename $3)
PORT=5039

# Set up gdb commands
GDBSETUP=$GDB_TMP_DIR/gdb.setup
echo "file $GDB_TMP_DIR/skia_launcher" >> $GDBSETUP
echo "target remote :$PORT" >> $GDBSETUP
echo "set solib-absolute-prefix $GDB_TMP_DIR" >> $GDBSETUP
echo "set solib-search-path $GDB_TMP_DIR" >> $GDBSETUP

# The apps shared library symbols are not loaded by default so we load them here
echo "break skia_launcher.cpp:launch_app" >> $GDBSETUP
echo "continue" >> $GDBSETUP
echo "sharedLibrary $APP_NAME" >> $GDBSETUP

source $SCRIPT_DIR/android_setup.sh

# Launch gdb client
echo "Entering gdb client shell"
if [ "$ANDROID_ARCH" == "x86" ]
then
  $ANDROID_TOOLCHAIN/i686-linux-android-gdb -x $GDBSETUP
else
  $ANDROID_TOOLCHAIN/arm-linux-androideabi-gdb -x $GDBSETUP

# Clean up
rm -rf $GDB_TMP_DIR